import pygame
import sys
import json


# Constants
CELL_SIZE = 20
GRID_SIZE = 25
WIDTH, HEIGHT = GRID_SIZE * CELL_SIZE, (GRID_SIZE * CELL_SIZE) + 60
BACKGROUND_COLOR = (200, 200, 200)


def load_scenario(grid, scenario_path):
    with open(scenario_path, 'r') as f:
        scenario = json.load(f)

    for ped in scenario['pedestrians']:
        grid.add_pedestrian(ped['x'], ped['y'])

    for tgt in scenario['targets']:
        grid.add_target(tgt['x'], tgt['y'])

    for obs in scenario['obstacles']:
        grid.add_obstacle(obs['x'], obs['y'])


class Grid:
    def __init__(self, grid_size, cell_size):
        self.grid_size = grid_size
        self.cell_size = cell_size
        self.grid = [['E' for _ in range(grid_size)] for _ in range(grid_size)]

    def add_pedestrian(self, x, y):
        self.grid[x][y] = 'P'

    def add_target(self, x, y):
        self.grid[x][y] = 'T'

    def add_obstacle(self, x, y):
        self.grid[x][y] = 'O'

    def draw(self, screen):
        for i in range(self.grid_size):
            for j in range(self.grid_size):
                cell_state = self.grid[i][j]
                cell_color = self.get_color_by_state(cell_state)
                pygame.draw.rect(screen, cell_color, pygame.Rect(i * CELL_SIZE, j * CELL_SIZE, CELL_SIZE, CELL_SIZE))
                pygame.draw.rect(screen, (0, 0, 0), pygame.Rect(i * CELL_SIZE, j * CELL_SIZE, CELL_SIZE, CELL_SIZE), 1)

    def get_color_by_state(self, state):
        if state == 'E':
            return (255, 255, 255)  # white
        elif state == 'P':
            return (0, 0, 255)  # blue
        elif state == 'O':
            return (0, 0, 0)  # black
        elif state == 'T':
            return (255, 0, 0)  # red
        else:
            raise ValueError("Invalid cell state")

    def update(self):
        new_grid = [['E' for _ in range(self.grid_size)] for _ in range(self.grid_size)]
        target_positions = [(i, j) for i, row in enumerate(self.grid) for j, cell in enumerate(row) if cell == 'T']
        if not target_positions:
            raise ValueError("No target found in the grid")

        for i, row in enumerate(self.grid):
            for j, cell in enumerate(row):
                if cell == 'P':
                    move_i, move_j = self.find_best_move(i, j, target_positions)
                    if self.grid[move_i][move_j] != 'T':
                        new_grid[move_i][move_j] = 'P'
                elif cell == 'O':
                    new_grid[i][j] = 'O'
                elif cell == 'T':
                    new_grid[i][j] = 'T'

        self.grid = new_grid

    def find_best_move(self, i, j, target_positions):
        min_distance = float("inf")
        best_move = (i, j)

        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]:
            new_i, new_j = i + dx, j + dy
            if 0 <= new_i < self.grid_size and 0 <= new_j < self.grid_size:
                if self.grid[new_i][new_j] not in ('O', 'P'):
                    min_tgt_distance = min(
                        (new_i - tgt_i) ** 2 + (new_j - tgt_j) ** 2 for tgt_i, tgt_j in target_positions)
                    if min_tgt_distance < min_distance:
                        min_distance = min_tgt_distance
                        best_move = (new_i, new_j)

        return best_move

    def cost_function(self, pos):
        i, j = pos
        target_pos = self.find_target_position()

        if self.grid[i][j] == 'O':
            return float('inf')

        distance_to_target = ((i - target_pos[0]) ** 2 + (j - target_pos[1]) ** 2) ** 0.5

        return distance_to_target

    def find_target_position(self):
        for i in range(self.grid_size):
            for j in range(self.grid_size):
                if self.grid[i][j] == 'T':
                    return (i, j)

        raise ValueError("No target found in the grid")


class Button:
    def __init__(self, x, y, width, height, text, color):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.text = text
        self.color = color

    def draw(self, screen):
        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height))
        font = pygame.font.Font(pygame.font.get_default_font(), 20)
        text_render = font.render(self.text, True, (0, 0, 0))
        text_rect = text_render.get_rect()
        text_rect.center = (self.x + self.width // 2, self.y + self.height // 2)
        screen.blit(text_render, text_rect)

    def is_clicked(self, pos):
        x, y = pos
        return self.x <= x <= self.x + self.width and self.y <= y <= self.y + self.height


def main():
    pygame.init()
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("Crowd Simulation")
    clock = pygame.time.Clock()

    grid = Grid(GRID_SIZE, CELL_SIZE)
    load_scenario(grid, "Exercise1/scenario.json")

    next_step_button = Button(10, HEIGHT - 50, 100, 40, "Next Step", (150, 150, 150))

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

            if event.type == pygame.MOUSEBUTTONDOWN:
                if next_step_button.is_clicked(event.pos):
                    grid.update()

        screen.fill(BACKGROUND_COLOR)
        grid.draw(screen)
        next_step_button.draw(screen)

        pygame.display.flip()
        clock.tick(10)


if __name__ == '__main__':
    pygame.init()
    pygame.font.init()
    main()

